<style>
    .customHide {
    border-radius: 4px;
  }

  @media(max-width:767px){
   .template-page-bridal-home .video-collection-tabs__list-link.active{
        border-bottom-color: #000 !important;
        border-bottom-width: 1px;
        border-bottom-style: solid;
        position: relative;
        z-index: 9;
    }
      .bridal-home-1 .video-collection-tabs__list-link{
      width:auto !important;
    }
    body .main-collection-section .price {
      bottom: 20px;
    }
    .template-page-bridal-home video.custom-video{
      height:387px !important;
    }
  }
</style>
{{ 'homepage.css' | asset_url | stylesheet_tag }}
{{ 'interior-design.css' | asset_url | stylesheet_tag }}
{{ 'bridal.css' | asset_url | stylesheet_tag }}
<script type="load">
   jQuery(document).ready(function($) {    
      let currentIndex = 0;
      const tabsvideo = document.querySelectorAll(".bridal-home .video-tab");
      function updateTabIndicator() {
            const activeTab1 = document.querySelector('.bridal-home .video-tab.active span');
              const activeTab = document.querySelector('.bridal-home .video-tab.active');
            const indicator = document.querySelector('.bridal-home .tab-indicator');
            if (activeTab && indicator) {
              const tabRect1 = activeTab1.getBoundingClientRect();
              const containerRect1 = activeTab1.parentElement.getBoundingClientRect();
              const tabRect = activeTab.getBoundingClientRect();
              const containerRect = activeTab.parentElement.getBoundingClientRect();
           const width = window.innerWidth;
            var left = 0;
               var width1 = 0;
   
        left = tabRect.left - containerRect.left;
                width1 = tabRect.width;
    // Large desktops

    // Do something for large desktops
  
            
          
              indicator.style.left = `${left}px`;
              indicator.style.width = `${width1}px`;
            }
          }

            function updateTabIndicator1() {
 const activeTab = document.querySelector(".bridal-home-1 .video-tab.active");
  const indicator = document.querySelector(".bridal-home-1 .tab-indicator");
  const mainTabProgress = document.querySelector(
    ".bridal-home-1 .video-collection-tabs__list"
  );

  // Ensure all required elements exist before proceeding
  if (!activeTab || !indicator || !mainTabProgress) {
    return;
  }

  const tabRect = activeTab.getBoundingClientRect();
  const parentRect = mainTabProgress.getBoundingClientRect();


  let left = 0;
  let width = 0;


    left = tabRect.left;
    width = tabRect.width;

  indicator.style.left = `${left}px`;
  indicator.style.width = `${width}px`;
       }
     let scrollEnabled = true;

// Debounce function to optimize scroll
{% comment %} function debounce(func, wait) {
  let timeout;
  return function () {
    const context = this, args = arguments;
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(context, args), wait);
  };
} {% endcomment %}
function debounce(func, wait) {
let timeout;
return function () {
const context = this, args = arguments;
clearTimeout(timeout);
timeout = setTimeout(() => func.apply(context, args), wait);
};
}


const tabMap = {};

$(".bridal-home .video-tab").each(function () {
  const tabId = $(this).data("tab-id");
  if (tabId) {
    tabMap[tabId] = $(this);
  }
});

// Remove active from all tabs
function clearActiveTabs() {
  $(".bridal-home .video-tab").removeClass("active");
}

// Activate tab for a section
function activateTab(sectionId) {
  if (tabMap[sectionId]) {
    clearActiveTabs();
    tabMap[sectionId].addClass("active");
    updateTabIndicator?.();
  }
}
const isTablet = window.matchMedia('(max-width: 1024px)').matches; // adjust max-width as per your tablet criteria
const thresholdValue = isTablet ? 1 : 0.9;
// Create observer
const observer = new IntersectionObserver(

  (entries) => {
       if (!scrollEnabled) return; 
       
    entries.forEach((entry) => {
 
      if (entry.isIntersecting && entry.intersectionRatio >= thresholdValue) {
   
     
        const sectionId = entry.target.id;
        activateTab(sectionId);
      }
    });
  },
  {
    
    root: null, // use viewport
    threshold: [thresholdValue], // trigger when 50% visible (adjust as needed)
  }
);

// Observe all sections with class .row
$(".row[id]").each(function () {
  observer.observe(this);
});

$('.bridal-home .video-tabs  .video-tab').on('click', function () {
 const tabId = $(this).data('tab-id');

   history.replaceState(null, null, '#' + tabId);

 scrollToTabContent(tabId);  
 
});



function scrollToTabContent(tabId) {

  scrollEnabled = false;

$('html, body').animate({
  scrollTop: $('#' + tabId).offset().top - 100
}, 500, function () {
  // ðŸ’¡ Add a delay before enabling scroll observer again
  setTimeout(() => {
  activateTab(tabId)
    scrollEnabled = true;
  }, 600);
});
}
if(window.innerWidth > 769){
  const hash = window.location.hash;
 if (hash) {
    const tabId = hash.substring(1); // Remove the '#' symbol

    // Optional: check if the element with that ID exists
    if ($('#' + tabId).length) {
      
      scrollToTabContent(tabId); // Call your scroll function from earlier
        activateTab(tabId)
    }
  } 
     else{
       $('.bridal-home .video-tabs .video-tab').first().addClass('active');
    
     }
    updateTabIndicator()
}




    

// Click handler

// Set first tab as active on page load


 updateTabIndicator();
});

</script>



<script data-main type="load">
   
 if (window.innerWidth <= 768) {

class RenderPage{
  constructor(){

    this.currentindex = 0

   
     this.renderFullPage()
       
  }
  renderFullPage(){
        this.mobileTabsVideo = document.querySelectorAll(".bridal-home-1 .video-tabs .video-tab");

     this.renderTab();
     this.updateSlider()

  }
   renderTab(){

          document.querySelector(".bridal-home-1 .prev-btn-video")?.addEventListener("click", (e) => {
             if(this.currentindex==0){
         return null
       } 
            const currentTabItems = e.currentTarget.closest(".video-collection-tabs__list")
            currentTabItems.classList.add("loader")
          
      if (this.currentindex > 0) {
        this.currentindex--;
        this.updateTabsVideo(this.currentindex);
        
      }
    });

    document.querySelector(".bridal-home-1 .next-btn-video")?.addEventListener("click", (e) => {
        if(this.currentindex===this.mobileTabsVideo.length - 1){
        return null
      }
        const currentTabItems = e.currentTarget.closest(".video-collection-tabs__list")
            currentTabItems.classList.add("loader")
    
      if (this.currentindex < this.mobileTabsVideo.length - 1) {
        this.currentindex++;
         this.updateTabsVideo(this.currentindex);
      
      }
    });
 

  
  }

   updateTabsVideo(index) {
      this.mobileTabsVideo.forEach((tab, i) => {
        tab.classList.remove("active");
        tab.style.display = i === index ? "inline-block" : "none"; // Show only active
      });

      this.mobileTabsVideo[index].classList.add("active");
       this.mobileTabsVideo[index].click()
     const handlebox =  this.mobileTabsVideo[index].dataset.collectionHandel

        this.fetchSectionFromPage(handlebox);
    } 
   fetchSectionFromPage(pageUrl) {
fetch(`${pageUrl}`)
  .then(response => response.text())
  .then(htmlText => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(htmlText, 'text/html');

    if (doc) {
      const newContent = doc.querySelector("#main-content");
      if (newContent) {
        document.querySelector("#main-content").innerHTML = newContent.innerHTML;
                 

      // Run all inline and external scripts found inside new content
      const scripts = newContent.querySelectorAll("script:not([data-main])");
      scripts.forEach((script) => {
        const newScript = document.createElement("script");

        // Copy attributes (like src, type, etc.)
        [...script.attributes].forEach((attr) =>
          newScript.setAttribute(attr.name, attr.value)
        );

        // Copy inline script content
        if (script.textContent) {
          newScript.textContent = script.textContent;
        }

        // Append to body (or wherever you prefer)
        document.body.appendChild(newScript);
      });
        this.renderFullPage()
      } else {
        console.warn(`Section with ID #main-content not found on ${pageUrl}`);
      }
    }
  })
  .catch(error => {
    console.error('Error fetching section:', error);
  });
    }
updateSlider(){
const sliderItems = document.querySelectorAll(".custom-slick-slider");

sliderItems.forEach((slider) => {
  if (!$(slider).hasClass('slick-initialized') && typeof $(slider).slick === 'function') {
    $(slider).slick({
      slidesToShow: 4,
      slidesToScroll: 1,
      arrows: true,
      prevArrow:
        '<button type="button" class="slick-prev1 flickity-nav"><img width="38" height="38" src="//eliesaab.com/cdn/shop/t/174/assets/arrow-left.svg?v=160317388040158456881749119394" alt="Previous"></button>',
      nextArrow:
        '<button type="button" class="slick-next1 flickity-nav"><img width="38" height="38" src="//eliesaab.com/cdn/shop/t/174/assets/arrow-right.svg?v=126479695621962320581749119394" alt="Next"></button>',
      responsive: [
        {
          breakpoint: 768,
          settings: {
            slidesToShow: 1,
            arrows: false,
            centerMode: true,
                    centerPadding: '30px',
          },
        },
      ],
    });
  }
});

  
}


}
      jQuery(document).ready(function($) {  
    new RenderPage()

      })


    // load first tab content
  
}
  
</script>
<script type="load">
  $(document).ready(() => {
    document.querySelectorAll('.bridal-home').forEach(function(el) {
      const parent = el.closest('.shopify-section');
      if (parent) {
          parent.classList.add('custom-sticky-style');
      }
  });
  });
</script>
{% schema %}
{
  "name": "Bridal home",
  "settings": []
}
{% endschema %}
